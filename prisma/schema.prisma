generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())

  fullName  String
  email     String   @unique
  password  String   @unique
  role UserRole @default(USER)
  verified DateTime?

  provider String?
  providerId String?

  cart Cart?
  orders Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* Категория: Пиццы, Комбо, Закуски, Коктейли, Кофе, Напитки, Десерты, Соусы, Другие товары, Новинки, Завтрак */
model Category {
  id Int @id @default(autoincrement())

  name String @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* Продукт: пицца, омлет, сырники, кофе */
model Product {
  id        Int      @id @default(autoincrement())

  name     String
  imageUrl String

  ingredients Ingredient[]

  category Category @relation(fields: [categoryId], references: [id]) // Для JavaScript
  categoryId Int // categoryId для базы данных

  productVariations ProductVariation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* Вариация Продукта - это размер продукта: маленькая, средняя, большая, традиционное, тонкое, 25см, 30см, 35см */
model ProductVariation {
  id    Int @id @default(autoincrement())

  price Int
  size  Int?
  pizzaType Int?

  cartProductVariations CartProductVariation[]

  product Product @relation(fields: [productId], references: [id])
  productId Int
}

/* Ингридиенты: помидоры, острый перец, моцарелла, сыр, фирменный соус, чеснок и т. д. */
model Ingredient {
  id Int @id @default(autoincrement())

  name String
  price Int
  imageUrl String

  products Product[]
  cartProductVariations CartProductVariation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
/* Модель корзины */
model Cart {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int? @unique

  cartProductVariations CartProductVariation[]

  token String

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* Дополнительная вариация продукта в корзине */
model CartProductVariation {
  id Int @id @default(autoincrement())

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productVariation ProductVariation @relation(fields: [productVariationId], references: [id])
  productVariationId Int

  quantity Int @default(1)

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  paymentId String?
  status OrderStatus
  
  listProductsCart Json

  fullName String
  address String
  email String
  phone String
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int? @unique

  code String @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
